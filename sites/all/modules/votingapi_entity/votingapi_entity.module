<?php
/**
 * @file
 * Voting API Entity integration.
 */

/**
 * Implements hook_entity_info().
 */
function votingapi_entity_entity_info() {
  $info['votingapi_vote'] = array(
    'label' => 'Voting API Vote',
    'base table' => 'votingapi_vote',
    'fieldable' => FALSE,
    'entity keys' => array(
      'id' => 'vote_id',
    ),
  );
  return $info;
}

/**
 * Implements hook_entity_property_info().
 */
function votingapi_entity_entity_property_info() {
  $info = array();
  $properties = &$info['votingapi_vote']['properties'];

  $properties['vote_id'] = array(
    'label' => t('Vote ID'),
    'type' => 'integer',
    'description' => t("The unique vote ID."),
  );

  $properties['entity_type'] = array(
    'label' => t('Entity type'),
    'type' => 'text',
    'description' => t('Voted entity type'),
  );

  $properties['entity_id'] = array(
    'label' => t('Entity ID'),
    'type' => 'integer',
    'description' => t('Voted entity ID'),
  );

  $properties['value'] = array(
    'label' => t('Value'),
    'type' => 'decimal',
  );

  $properties['value_type'] = array(
    'label' => t('Vote value type'),
    'type' => 'text',
  );

  $properties['tag'] = array(
    'label' => t('Tag'),
    'type' => 'text',
  );

  $properties['uid'] = array(
    'label' => t('User'),
    'type' => 'user',
  );

  $properties['timestamp'] = array(
    'label' => t('Timestamp'),
    'type' => 'date',
  );

  $properties['vote_source'] = array(
    'label' => t('Vote source'),
    'type' => 'text',
    'description' => t('A unique identifier used to distinguish votes cast by anonymous users. By default, this is the IP address of the remote machine.'),
  );

  return $info;
}

/**
 * Invoke entity_delete hook to ensure vote deletion is properly tracked.
 *
 * Implements hook_votingapi_delete().
 */
function votingapi_entity_votingapi_delete($votes) {
  $entities = votingapi_entity_load_entities($votes);
  foreach ($entities as $entity) {
    module_invoke_all('entity_delete', $entity, 'votingapi_vote');
  }
}

/**
 * Invoke entity_insertion hook to ensure vote insertion is properly tracked.
 *
 * Implements hook_votingapi_insert().
 */
function votingapi_entity_votingapi_insert($votes) {
  $entities = votingapi_entity_load_entities($votes);
  foreach ($entities as $entity) {
    module_invoke_all('entity_insert', $entity, 'votingapi_vote');
  }
}

/**
 * Load corresponding vote entities.
 *
 * @param array $votes
 *   Votes (Voting API) list.
 *
 * @return array
 *   Array of vote entities.
 */
function votingapi_entity_load_entities($votes) {
  return entity_load('votingapi_vote', votingapi_entity_extract_vote_ids($votes));
}

/**
 * Extract vote IDs from votes list.
 *
 * @param array $votes
 *   Votes (Voting API) list.
 *
 * @return array
 *   Vote IDs list.
 */
function votingapi_entity_extract_vote_ids($votes) {
  $ids = array();

  foreach ($votes as $vote) {
    if (isset($vote['vote_id'])) {
      $ids[] = $vote['vote_id'];
    }
    else {
      // This should never happen but just in case it's better to log it.
      watchdog('votingapi_entity', 'Could not fetch vote ID', WATCHDOG_ERROR);
    }
  }

  return $ids;
}
